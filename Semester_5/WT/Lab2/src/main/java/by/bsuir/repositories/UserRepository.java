package by.bsuir.repositories;

import by.bsuir.constants.Messages;
import by.bsuir.domain.Cart;
import by.bsuir.domain.Order;
import by.bsuir.domain.PagingParams;
import by.bsuir.domain.Product;
import by.bsuir.domain.Role;
import by.bsuir.domain.Statistics;
import by.bsuir.domain.User;
import by.bsuir.exceptions.ConnectionException;
import lombok.NoArgsConstructor;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@NoArgsConstructor
public class UserRepository {
    private final ProductRepository productRepository = new ProductRepository();
    private final static ConnectionPool pool = ConnectionPool.getInstance();
    private final static String ADD_USER = "INSERT INTO users (name, lastName, email, birthDate, " +
            "registrationDate, balance, password, address, phoneNumber) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";
    private final static String GET_USER_BY_EMAIL = "SELECT * FROM users WHERE email = ?";
    private final static String GET_USER_BALANCE = "SELECT balance FROM users WHERE id = ?";
    private final static String GET_USER_BY_CREDENTIALS = "SELECT * FROM users WHERE email = ? AND password = ?";
    private final static String GET_USER_ORDERS = "SELECT * FROM orders WHERE orders.userId = ? LIMIT ?, ?";
    private final static String GET_USER_ROLES = "SELECT roles.id, roles.name FROM roles JOIN " +
            "users_roles ON roles.id = users_roles.roleId WHERE users_roles.userId = ?";
    private final static String UPDATE_ADDRESS_AND_PHONE_NUMBER = "UPDATE users SET address = ?, phoneNumber = ? " +
            "WHERE id = ?";
    private final static String GET_USER_FAVORITE_CATEGORY = "SELECT category FROM (SELECT category, count(*) as count " +
            "FROM orders_products JOIN products ON productId = products.id " +
            "JOIN orders ON orderId = orders.id WHERE userId = ? GROUP BY category) as res1 ORDER BY count DESC LIMIT 1";
    private final static String GET_USER_DAYS_REGISTERED = "SELECT DATEDIFF(CURRENT_DATE, registrationDate) " +
            "as result FROM users WHERE id = ?";
    private final static String GET_USER_PURCHASED_BOOKS_COUNT = "SELECT count(*) FROM orders_products JOIN orders " +
            "ON orderId = orders.id WHERE userId = ?";
    private final static String GET_USER_ORDERS_COUNT = "SELECT count(*) FROM orders WHERE userId = ?";
    private final static String PERSIST_ORDER = "INSERT INTO orders (userId, date, price) VALUES (?, ?, ?)";
    private final static String PERSIST_ORDER_PRODUCTS = "INSERT INTO orders_products (orderId, productId) VALUES " +
            "(?, ?)";
    private final static String UPDATE_USER_BALANCE = "UPDATE users SET balance = ? WHERE id = ?";

    public void persist(User user) throws SQLException, ConnectionException {
        Connection connection = pool.getConnection();
        try (PreparedStatement statement = connection.prepareStatement(ADD_USER, Statement.RETURN_GENERATED_KEYS)) {
            statement.setString(1, user.getName());
            statement.setString(2, user.getLastName());
            statement.setString(3, user.getEmail());
            statement.setDate(4, Date.valueOf(user.getBirthDate()));
            statement.setDate(5, Date.valueOf(user.getRegistrationDate()));
            statement.setBigDecimal(6, user.getBalance());
            statement.setString(7, user.getPassword());
            statement.setString(8, user.getAddress());
            statement.setString(9, user.getPhoneNumber());
            statement.execute();
            ResultSet autoGenerated = statement.getGeneratedKeys();
            if (autoGenerated.next()) {
                user.setId(autoGenerated.getInt(1));
            }
            autoGenerated.close();
        } finally {
            pool.returnConnection(connection);
        }
    }

    public boolean isPresent(String userEmail) throws ConnectionException, SQLException {
        Connection connection = pool.getConnection();
        try (PreparedStatement statement = connection.prepareStatement(GET_USER_BY_EMAIL)) {
            statement.setString(1, userEmail);
            ResultSet set = statement.executeQuery();
            boolean isPresent = set.next();
            set.close();
            return isPresent;
        } finally {
            pool.returnConnection(connection);
        }
    }

    public Optional<User> getByEmail(String email) throws ConnectionException, SQLException {
        Optional<User> user = Optional.empty();
        Connection connection = pool.getConnection();

        //Get all user info except orders and roles
        try (PreparedStatement statement = connection.prepareStatement(GET_USER_BY_EMAIL)) {
            statement.setString(1, email);
            ResultSet set = statement.executeQuery();
            if (set.next()) {
                user = Optional.of(getUserInfo(set));
            }
            set.close();
        } finally {
            pool.returnConnection(connection);
        }

        //Get user orders and roles
        if (user.isPresent()) {
            user.get().setOrders(getOrders(user.get().getId(), new PagingParams(0, 1000_000)));
            user.get().setRoles(getRoles(user.get().getId()));
        }

        return user;
    }

    public BigDecimal getUserBalance(int userId) throws ConnectionException, SQLException {
        BigDecimal result = BigDecimal.valueOf(-1);
        Connection connection = pool.getConnection();
        try (PreparedStatement statement = connection.prepareStatement(GET_USER_BALANCE)) {
            statement.setInt(1, userId);
            ResultSet set = statement.executeQuery();
            if (set.next()) {
                result = set.getBigDecimal(1);
            }
            set.close();
            return result;
        } finally {
            pool.returnConnection(connection);
        }
    }

    public Optional<User> getByCredentials(String email, String password) throws ConnectionException, SQLException {
        Optional<User> user = Optional.empty();
        Connection connection = pool.getConnection();

        //Get all user info except orders and roles
        try (PreparedStatement statement = connection.prepareStatement(GET_USER_BY_CREDENTIALS)) {
            statement.setString(1, email);
            statement.setString(2, password);
            ResultSet set = statement.executeQuery();
            if (set.next()) {
                user = Optional.of(getUserInfo(set));
            }
            set.close();
        } finally {
            pool.returnConnection(connection);
        }

        //Get user orders and roles
        if (user.isPresent()) {
            user.get().setOrders(getOrders(user.get().getId(), new PagingParams(0, 1000_000)));
            user.get().setRoles(getRoles(user.get().getId()));
        }

        return user;
    }

    private User getUserInfo(ResultSet set) throws SQLException {
        return User.
                builder().
                id(set.getInt("id")).
                name(set.getString("name")).
                lastName(set.getString("lastName")).
                email(set.getString("email")).
                birthDate(set.getDate("birthDate").toLocalDate()).
                registrationDate(set.getDate("registrationDate").toLocalDate()).
                balance(set.getBigDecimal("balance")).
                password(set.getString("password")).
                address(set.getString("address")).
                phoneNumber(set.getString("phoneNumber")).
                orders(new ArrayList<>()).
                roles(new ArrayList<>()).
                build();
    }

    public List<Order> getOrders(int userId, PagingParams params) throws ConnectionException, SQLException {
        List<Order> result = new ArrayList<>();
        Connection connection = pool.getConnection();
        try (PreparedStatement statement = connection.prepareStatement(GET_USER_ORDERS)) {
            int startPosition = params.getPageNumber() * params.getPageSize();
            statement.setInt(1, userId);
            statement.setInt(2, startPosition);
            statement.setInt(3, params.getPageSize());
            ResultSet set = statement.executeQuery();
            while (set.next()) {
                result.add(Order.
                        builder().
                        id(set.getInt("orders.id")).
                        date(set.getDate("date").toLocalDate()).
                        userId(set.getInt("userId")).
                        price(set.getBigDecimal("price")).
                        products(productRepository.getOrderProducts(set.getInt("orders.id"))).
                        build());
            }
            set.close();
        } finally {
            pool.returnConnection(connection);
        }
        return result;
    }

    public List<Role> getRoles(int userId) throws ConnectionException, SQLException {
        List<Role> result = new ArrayList<>();
        Connection connection = pool.getConnection();
        try (PreparedStatement statement = connection.prepareStatement(GET_USER_ROLES)) {
            statement.setInt(1, userId);
            ResultSet set = statement.executeQuery();
            while (set.next()) {
                result.add(Role.
                        builder().
                        id(set.getInt("id")).
                        name(set.getString("name")).
                        build());
            }
            set.close();
        } finally {
            pool.returnConnection(connection);
        }
        return result;
    }

    public void updateAddressAndPhoneNumber(String address, String phoneNumber, int userId) throws ConnectionException, SQLException {
        Connection connection = pool.getConnection();
        try(PreparedStatement statement = connection.prepareStatement(UPDATE_ADDRESS_AND_PHONE_NUMBER)) {
            statement.setString(1, address);
            statement.setString(2, phoneNumber);
            statement.setInt(3, userId);
            statement.execute();
        } finally {
            pool.returnConnection(connection);
        }
    }

    public Statistics getStatistics(int userId) throws SQLException, ConnectionException {
        return Statistics.
                builder().
                userId(userId).
                daysRegistered(getDaysRegistered(userId)).
                orderCount(getOrdersCount(userId)).
                booksCount(getPurchasedBooksCount(userId)).
                favoriteCategory(getFavoriteCategory(userId)).
                build();
    }

    public String getFavoriteCategory(int userId) throws ConnectionException, SQLException {
        String result = Messages.UNKNOWN;
        Connection connection = pool.getConnection();
        try (PreparedStatement statement = connection.prepareStatement(GET_USER_FAVORITE_CATEGORY)) {
            statement.setInt(1, userId);
            ResultSet set = statement.executeQuery();
            if (set.next()) {
                result = set.getString(1);
            }
            set.close();
            return result;
        } finally {
            pool.returnConnection(connection);
        }
    }

    public int getDaysRegistered(int userId) throws ConnectionException, SQLException {
        int result = 0;
        Connection connection = pool.getConnection();
        try (PreparedStatement statement = connection.prepareStatement(GET_USER_DAYS_REGISTERED)) {
            statement.setInt(1, userId);
            ResultSet set = statement.executeQuery();
            if (set.next()) {
                result = set.getInt(1);
            }
            set.close();
            return result;
        } finally {
            pool.returnConnection(connection);
        }
    }

    public int getPurchasedBooksCount(int userId) throws ConnectionException, SQLException {
        int result = 0;
        Connection connection = pool.getConnection();
        try (PreparedStatement statement = connection.prepareStatement(GET_USER_PURCHASED_BOOKS_COUNT)) {
            statement.setInt(1, userId);
            ResultSet set = statement.executeQuery();
            if (set.next()) {
                result = set.getInt(1);
            }
            set.close();
            return result;
        } finally {
            pool.returnConnection(connection);
        }
    }

    public int getOrdersCount(int userId) throws ConnectionException, SQLException {
        int result = 0;
        Connection connection = pool.getConnection();
        try (PreparedStatement statement = connection.prepareStatement(GET_USER_ORDERS_COUNT)) {
            statement.setInt(1, userId);
            ResultSet set = statement.executeQuery();
            if (set.next()) {
                result = set.getInt(1);
            }
            set.close();
            return result;
        } finally {
            pool.returnConnection(connection);
        }
    }

    public Order makeOrder(Cart cart, int userId) throws ConnectionException, SQLException {
        Order order = Order.
                builder().
                userId(userId).
                price(cart.getPrice()).
                products(new ArrayList<>(cart.getProducts())).
                build();
        Connection connection = pool.getConnection();
        int orderId = 0;
        try (PreparedStatement statement = connection.prepareStatement(PERSIST_ORDER, Statement.RETURN_GENERATED_KEYS)) {
            connection.setAutoCommit(false);
            statement.setInt(1, userId);
            Timestamp now = new Timestamp(System.currentTimeMillis());
            order.setDate(now.toLocalDateTime().toLocalDate());
            statement.setTimestamp(2, now);
            statement.setBigDecimal(3, cart.getPrice());
            statement.execute();
            ResultSet autoGenerated = statement.getGeneratedKeys();
            if (autoGenerated.next()) {
                orderId = autoGenerated.getInt(1);
                order.setId(orderId);
            }
        } catch (SQLException e) {
            pool.returnConnection(connection);
            connection.setAutoCommit(true);
            throw new SQLException(e.getMessage());
        }

        try (PreparedStatement statement = connection.prepareStatement(PERSIST_ORDER_PRODUCTS)) {
            for (Product product : cart.getProducts()) {
                statement.setInt(1, orderId);
                statement.setInt(2, product.getId());
                statement.execute();
            }
        } catch (SQLException e) {
            pool.returnConnection(connection);
            connection.setAutoCommit(true);
            throw new SQLException(e.getMessage());
        }

        try (PreparedStatement statement = connection.prepareStatement(UPDATE_USER_BALANCE)){
            statement.setBigDecimal(1, getUserBalance(userId).subtract(cart.getPrice()));
            statement.setInt(2, userId);
            statement.execute();
        } catch (SQLException e) {
            pool.returnConnection(connection);
            connection.setAutoCommit(true);
            throw new SQLException(e.getMessage());
        }
        connection.commit();
        pool.returnConnection(connection);
        connection.setAutoCommit(true);
        return order;
    }
}
